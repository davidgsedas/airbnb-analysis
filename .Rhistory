mean_host_since <- mean(df$host_since, na.rm=TRUE)
df$host_since[is.na(df$host_since)] <- mean_host_since
summary(df)
ggplot(df, aes(x = review_scores_rating)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
ggtitle("Histograma distribución de ratings") +
xlab("Review Scores Rating") +
ylab("Frecuencia")
hist(df$price, main = "Histograma distribución precio", breaks=100)
ggplot(df, aes(price, review_scores_rating)) +
geom_smooth()
df_precio_barrio <- df %>% select(price, neighbourhood_group_cleansed) %>% group_by(neighbourhood_group_cleansed) %>% summarize(avg_price = mean(price, na.rm = TRUE))
ggplot(df_precio_barrio, aes(reorder(neighbourhood_group_cleansed, avg_price), avg_price)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(neighbourhood_group_cleansed, review_scores_rating)) +
geom_bar() +
labs(x = "Barrio", y = "Calificación por localización") +
ggtitle("Boxplot de calificación por localización y barrio")
df$host_since <- as.numeric(format(df$host_since, "%Y"))
df <- df %>%
mutate(across(where(is.logical), as.numeric))
df_dummies <- df |>
dummy_cols(select_columns = names(which(sapply(df, is.factor))), remove_selected_columns =  = TRUE)
library(tidyverse)
library(quarto)
library(fastDummies)
df <- read_csv("listings_bcn.csv", show_col_types = FALSE)
str(df)
head(df)
summary(df)
df <- df |>
select(c(id,
host_id,
host_since,
host_response_time,
host_response_rate,
host_acceptance_rate,
host_is_superhost,
host_verifications,
host_has_profile_pic,
host_identity_verified,
calculated_host_listings_count,
calculated_host_listings_count_entire_homes,
calculated_host_listings_count_private_rooms,
calculated_host_listings_count_shared_rooms,
neighbourhood_group_cleansed,
latitude,
longitude,
room_type,
accommodates,
bathrooms_text,
bedrooms,
beds,
price,
minimum_nights,
maximum_nights,
has_availability,
availability_30,
availability_60,
availability_90,
availability_365,
instant_bookable,
number_of_reviews,
number_of_reviews_l30d,
review_scores_rating,
review_scores_accuracy,
review_scores_cleanliness,
review_scores_checkin,
review_scores_communication,
review_scores_location,
review_scores_value,
))
unique(df$host_response_time)
df$host_response_time <- ifelse(df$host_response_time == "within an hour", "<1h",
ifelse(df$host_response_time == "within a few hours", "~12h",
ifelse(df$host_response_time == "within a day", "~24h",
ifelse(df$host_response_time == "a few days or more", ">48h",
ifelse(df$host_response_time == "N/A", NA, df$host_response_time)))))
unique(df$bathrooms_text)
df$bathrooms_text <- ifelse(df$bathrooms_text == "Shared half-bath", "0.5 Shared bath",
ifelse(df$bathrooms_text == "Private half-bath", "0.5 bath",
ifelse(df$bathrooms_text == "Half-bath", "0.5 bath", df$bathrooms_text)))
df$shared_bathrooms <- grepl("shared|Shared", df$bathrooms_text)
df$n_bathrooms <- sapply(strsplit(df$bathrooms_text, " "), function(x) as.numeric(x[1]))
bathrooms_text_position <- which(colnames(df) == "bathrooms_text")
df <- df %>%
relocate(all_of(c("n_bathrooms", "shared_bathrooms")), .before = bathrooms_text_position)
df <- df %>%
select(-bathrooms_text)
rm(bathrooms_text_position)
unique(df$host_verifications)
df <- df %>%
mutate(verification_email = str_detect(df$host_verifications, "email"),
verification_phone = str_detect(df$host_verifications, "phone"),
verification_work_email = str_detect(df$host_verifications, "work_email"))
host_verification_text_position <- which(colnames(df) == "host_verifications")
df <- df %>%
relocate(all_of(c("verification_email", "verification_phone", "verification_work_email")), .before = host_verification_text_position)
df <- df %>%
select(-host_verifications)
rm(host_verification_text_position)
df$price <- as.numeric(gsub("\\$", "", df$price))
df$review_scores_rating <- ifelse(df$review_scores_rating == 0, NA, df$review_scores_rating)
df$host_response_rate <- as.numeric(sub("%", "", df$host_response_rate))/100
df$host_acceptance_rate <- as.numeric(sub("%", "", df$host_acceptance_rate))/100
df <- df %>%
mutate(
host_response_time = factor(host_response_time),
neighbourhood_group_cleansed = factor(neighbourhood_group_cleansed),
room_type = factor(room_type)
)
na_analysis <- df %>% summarize(across(everything(), ~sum(is.na(.))))
na_analysis
df <- df |>
mutate(across(where(is.numeric), ~if (any(is.na(.))) floor(replace_na(., mean(., na.rm = TRUE))) else .))
frecuencias_host_response_time <- table(df$host_response_time)
porcentajes_host_response_time <- prop.table(frecuencias_host_response_time) * 100
print(porcentajes_host_response_time)
df$host_response_time[is.na(df$host_response_time)] <- "<1h"
df$host_is_superhost[is.na(df$host_is_superhost)] <- FALSE
df$host_has_profile_pic[is.na(df$host_has_profile_pic)] <- FALSE
df$host_identity_verified[is.na(df$host_identity_verified)] <- FALSE
mean_host_since <- mean(df$host_since, na.rm=TRUE)
df$host_since[is.na(df$host_since)] <- mean_host_since
summary(df)
ggplot(df, aes(x = review_scores_rating)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
ggtitle("Histograma distribución de ratings") +
xlab("Review Scores Rating") +
ylab("Frecuencia")
hist(df$price, main = "Histograma distribución precio", breaks=100)
ggplot(df, aes(price, review_scores_rating)) +
geom_smooth()
df_precio_barrio <- df %>% select(price, neighbourhood_group_cleansed) %>% group_by(neighbourhood_group_cleansed) %>% summarize(avg_price = mean(price, na.rm = TRUE))
ggplot(df_precio_barrio, aes(reorder(neighbourhood_group_cleansed, avg_price), avg_price)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90))
# ggplot(df, aes(neighbourhood_group_cleansed, review_scores_rating)) +
#   geom_bar() +
#   labs(x = "Barrio", y = "Calificación por localización") +
#   ggtitle("Boxplot de calificación por localización y barrio")
# datos_agrupados <- df %>%
# gather(key = "rating_type", value = "ratings", review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value) %>% select(ratings, rating_type) %>% cbind(room_type = df$room_type)
#
#
# ggplot(datos_agrupados, aes(x = room_type)) +
#   geom_boxplot(aes(y = ratings, fill = rating_type)) +
#   scale_fill_brewer(palette = "Set1") +
#   theme(axis.text.x = element_text(angle = 90)) +
#   ylim(3.5,5)
df$host_since <- as.numeric(format(df$host_since, "%Y"))
df <- df %>%
mutate(across(where(is.logical), as.numeric))
df_dummies <- df |>
dummy_cols(select_columns = names(which(sapply(df, is.factor))), remove_selected_columns =  = TRUE)
df_dummies <- dummy_cols(select_columns = names(which(sapply(df, is.factor))), remove_selected_columns =  = TRUE)
df_dummies <- dummy_cols(select_columns = names(which(sapply(df, is.factor))), remove_selected_columns = TRUE)
df_dummies <- dummy_cols(df, select_columns = names(which(sapply(df, is.factor))), remove_selected_columns = TRUE)
View(df_dummies)
View(df_numerico_escalado)
View(df_numerico_escalado)
library(tidyverse)
library(quarto)
library(fastDummies)
df <- read_csv("listings_bcn.csv", show_col_types = FALSE)
str(df)
head(df)
summary(df)
df <- df |>
select(c(id,
host_id,
host_since,
host_response_time,
host_response_rate,
host_acceptance_rate,
host_is_superhost,
host_verifications,
host_has_profile_pic,
host_identity_verified,
calculated_host_listings_count,
calculated_host_listings_count_entire_homes,
calculated_host_listings_count_private_rooms,
calculated_host_listings_count_shared_rooms,
neighbourhood_group_cleansed,
latitude,
longitude,
room_type,
accommodates,
bathrooms_text,
bedrooms,
beds,
price,
minimum_nights,
maximum_nights,
has_availability,
availability_30,
availability_60,
availability_90,
availability_365,
instant_bookable,
number_of_reviews,
number_of_reviews_l30d,
review_scores_rating,
review_scores_accuracy,
review_scores_cleanliness,
review_scores_checkin,
review_scores_communication,
review_scores_location,
review_scores_value,
))
unique(df$host_response_time)
df$host_response_time <- ifelse(df$host_response_time == "within an hour", "<1h",
ifelse(df$host_response_time == "within a few hours", "~12h",
ifelse(df$host_response_time == "within a day", "~24h",
ifelse(df$host_response_time == "a few days or more", ">48h",
ifelse(df$host_response_time == "N/A", NA, df$host_response_time)))))
unique(df$bathrooms_text)
df$bathrooms_text <- ifelse(df$bathrooms_text == "Shared half-bath", "0.5 Shared bath",
ifelse(df$bathrooms_text == "Private half-bath", "0.5 bath",
ifelse(df$bathrooms_text == "Half-bath", "0.5 bath", df$bathrooms_text)))
df$shared_bathrooms <- grepl("shared|Shared", df$bathrooms_text)
df$n_bathrooms <- sapply(strsplit(df$bathrooms_text, " "), function(x) as.numeric(x[1]))
bathrooms_text_position <- which(colnames(df) == "bathrooms_text")
df <- df %>%
relocate(all_of(c("n_bathrooms", "shared_bathrooms")), .before = bathrooms_text_position)
df <- df %>%
select(-bathrooms_text)
rm(bathrooms_text_position)
unique(df$host_verifications)
df <- df %>%
mutate(verification_email = str_detect(df$host_verifications, "email"),
verification_phone = str_detect(df$host_verifications, "phone"),
verification_work_email = str_detect(df$host_verifications, "work_email"))
host_verification_text_position <- which(colnames(df) == "host_verifications")
df <- df %>%
relocate(all_of(c("verification_email", "verification_phone", "verification_work_email")), .before = host_verification_text_position)
df <- df %>%
select(-host_verifications)
rm(host_verification_text_position)
df$price <- as.numeric(gsub("\\$", "", df$price))
df$review_scores_rating <- ifelse(df$review_scores_rating == 0, NA, df$review_scores_rating)
df$host_response_rate <- as.numeric(sub("%", "", df$host_response_rate))/100
df$host_acceptance_rate <- as.numeric(sub("%", "", df$host_acceptance_rate))/100
df <- df %>%
mutate(
host_response_time = factor(host_response_time),
neighbourhood_group_cleansed = factor(neighbourhood_group_cleansed),
room_type = factor(room_type)
)
na_analysis <- df %>% summarize(across(everything(), ~sum(is.na(.))))
na_analysis
df <- df |>
mutate(across(where(is.numeric), ~if (any(is.na(.))) floor(replace_na(., mean(., na.rm = TRUE))) else .))
frecuencias_host_response_time <- table(df$host_response_time)
porcentajes_host_response_time <- prop.table(frecuencias_host_response_time) * 100
print(porcentajes_host_response_time)
df$host_response_time[is.na(df$host_response_time)] <- "<1h"
df$host_is_superhost[is.na(df$host_is_superhost)] <- FALSE
df$host_has_profile_pic[is.na(df$host_has_profile_pic)] <- FALSE
df$host_identity_verified[is.na(df$host_identity_verified)] <- FALSE
mean_host_since <- mean(df$host_since, na.rm=TRUE)
df$host_since[is.na(df$host_since)] <- mean_host_since
summary(df)
ggplot(df, aes(x = review_scores_rating)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
ggtitle("Histograma distribución de ratings") +
xlab("Review Scores Rating") +
ylab("Frecuencia")
hist(df$price, main = "Histograma distribución precio", breaks=100)
ggplot(df, aes(price, review_scores_rating)) +
geom_smooth()
df_precio_barrio <- df %>% select(price, neighbourhood_group_cleansed) %>% group_by(neighbourhood_group_cleansed) %>% summarize(avg_price = mean(price, na.rm = TRUE))
ggplot(df_precio_barrio, aes(reorder(neighbourhood_group_cleansed, avg_price), avg_price)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90))
# ggplot(df, aes(neighbourhood_group_cleansed, review_scores_rating)) +
#   geom_bar() +
#   labs(x = "Barrio", y = "Calificación por localización") +
#   ggtitle("Boxplot de calificación por localización y barrio")
df_numerico <- df |>
mutate(host_since = as.numeric(format(host_since, "%Y"))) |>
mutate(across(where(is.numeric), scale)) |>
mutate(across(where(is.logical), as.numeric)) |> # Convertir booleanos a numéricos
dummy_cols(select_columns = names(which(sapply(., is.factor))), remove_selected_columns = TRUE)
df_numerico <- df |>
mutate(host_since = as.numeric(format(host_since, "%Y"))) |>
mutate(across(where(is.numeric), scale)) |>
mutate(across(where(is.logical), as.numeric)) |> # Convertir booleanos a numéricos
df_numerico <- dummy_cols(df_transformed,
select_columns = names(which(sapply(df_transformed, is.factor))),
remove_selected_columns = TRUE)
df_numerico <- df |>
mutate(host_since = as.numeric(format(host_since, "%Y"))) |>
mutate(across(where(is.numeric), scale)) |>
mutate(across(where(is.logical), as.numeric))  # Convertir booleanos a numéricos
df_numerico <- dummy_cols(df_transformed,
select_columns = names(which(sapply(df_transformed, is.factor))),
remove_selected_columns = TRUE)
df_numerico <- df |>
mutate(host_since = as.numeric(format(host_since, "%Y"))) |>
mutate(across(where(is.numeric), scale)) |>
mutate(across(where(is.logical), as.numeric))
df_numerico <- dummy_cols(df_numerico,
select_columns = names(which(sapply(df_transformed, is.factor))),
remove_selected_columns = TRUE)
df_numerico <- df |>
mutate(host_since = as.numeric(format(host_since, "%Y"))) |>
mutate(across(where(is.numeric), scale)) |>
mutate(across(where(is.logical), as.numeric))
df_numerico <- dummy_cols(df_numerico,
select_columns = names(which(sapply(df_numerico, is.factor))),
remove_selected_columns = TRUE)
View(df_numerico)
# Aplicar PCA utilizando la función prcomp
pca_result <- prcomp(pca_data, center = TRUE, scale. = FALSE)
# Aplicar PCA utilizando la función prcomp
pca_result <- prcomp(df_numerico, center = TRUE, scale. = FALSE)
View(pca_result)
pca_result <- prcomp(df_numerico, center = TRUE, scale. = FALSE)
summary_pca <- summary(pca_result)
View(summary_pca)
install.packages("GGally")
library(tidyverse)
library(quarto)
library(fastDummies)
library(GGally)
pca_result <- prcomp(df_numerico, center = TRUE, scale. = FALSE)
pca_df <- as.data.frame(pca_result$x)
# Número de componentes principales
num_components <- ncol(pca_df)
# Crear un gráfico de pares de todos los componentes principales
ggpairs(pca_df, columns = 1:num_components)
# Número de componentes principales
num_components <- ncol(pca_df)
# Crear un gráfico de pares de todos los componentes principales
ggpair <- ggpairs(pca_df, columns = 1:num_components)
View(ggpair)
pca_result <- prcomp(df_numerico, center = TRUE, scale. = FALSE)
library(tidyverse)
library(quarto)
library(fastDummies)
library(GGally)
df <- read_csv("listings_bcn.csv", show_col_types = FALSE)
str(df)
head(df)
summary(df)
df <- df |>
select(c(id,
host_id,
host_since,
host_response_time,
host_response_rate,
host_acceptance_rate,
host_is_superhost,
host_verifications,
host_has_profile_pic,
host_identity_verified,
calculated_host_listings_count,
calculated_host_listings_count_entire_homes,
calculated_host_listings_count_private_rooms,
calculated_host_listings_count_shared_rooms,
neighbourhood_group_cleansed,
latitude,
longitude,
room_type,
accommodates,
bathrooms_text,
bedrooms,
beds,
price,
minimum_nights,
maximum_nights,
has_availability,
availability_30,
availability_60,
availability_90,
availability_365,
instant_bookable,
number_of_reviews,
number_of_reviews_l30d,
review_scores_rating,
review_scores_accuracy,
review_scores_cleanliness,
review_scores_checkin,
review_scores_communication,
review_scores_location,
review_scores_value,
))
unique(df$host_response_time)
df$host_response_time <- ifelse(df$host_response_time == "within an hour", "<1h",
ifelse(df$host_response_time == "within a few hours", "~12h",
ifelse(df$host_response_time == "within a day", "~24h",
ifelse(df$host_response_time == "a few days or more", ">48h",
ifelse(df$host_response_time == "N/A", NA, df$host_response_time)))))
unique(df$bathrooms_text)
df$bathrooms_text <- ifelse(df$bathrooms_text == "Shared half-bath", "0.5 Shared bath",
ifelse(df$bathrooms_text == "Private half-bath", "0.5 bath",
ifelse(df$bathrooms_text == "Half-bath", "0.5 bath", df$bathrooms_text)))
df$shared_bathrooms <- grepl("shared|Shared", df$bathrooms_text)
df$n_bathrooms <- sapply(strsplit(df$bathrooms_text, " "), function(x) as.numeric(x[1]))
bathrooms_text_position <- which(colnames(df) == "bathrooms_text")
df <- df %>%
relocate(all_of(c("n_bathrooms", "shared_bathrooms")), .before = bathrooms_text_position)
df <- df %>%
select(-bathrooms_text)
rm(bathrooms_text_position)
unique(df$host_verifications)
df <- df %>%
mutate(verification_email = str_detect(df$host_verifications, "email"),
verification_phone = str_detect(df$host_verifications, "phone"),
verification_work_email = str_detect(df$host_verifications, "work_email"))
host_verification_text_position <- which(colnames(df) == "host_verifications")
df <- df %>%
relocate(all_of(c("verification_email", "verification_phone", "verification_work_email")), .before = host_verification_text_position)
df <- df %>%
select(-host_verifications)
rm(host_verification_text_position)
df$price <- as.numeric(gsub("\\$", "", df$price))
df$review_scores_rating <- ifelse(df$review_scores_rating == 0, NA, df$review_scores_rating)
df$host_response_rate <- as.numeric(sub("%", "", df$host_response_rate))/100
df$host_acceptance_rate <- as.numeric(sub("%", "", df$host_acceptance_rate))/100
df <- df %>%
mutate(
host_response_time = factor(host_response_time),
neighbourhood_group_cleansed = factor(neighbourhood_group_cleansed),
room_type = factor(room_type)
)
na_analysis <- df %>% summarize(across(everything(), ~sum(is.na(.))))
na_analysis
df <- df |>
mutate(across(where(is.numeric), ~if (any(is.na(.))) floor(replace_na(., mean(., na.rm = TRUE))) else .))
frecuencias_host_response_time <- table(df$host_response_time)
porcentajes_host_response_time <- prop.table(frecuencias_host_response_time) * 100
print(porcentajes_host_response_time)
df$host_response_time[is.na(df$host_response_time)] <- "<1h"
df$host_is_superhost[is.na(df$host_is_superhost)] <- FALSE
df$host_has_profile_pic[is.na(df$host_has_profile_pic)] <- FALSE
df$host_identity_verified[is.na(df$host_identity_verified)] <- FALSE
mean_host_since <- mean(df$host_since, na.rm=TRUE)
df$host_since[is.na(df$host_since)] <- mean_host_since
summary(df)
ggplot(df, aes(x = review_scores_rating)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
ggtitle("Histograma distribución de ratings") +
xlab("Review Scores Rating") +
ylab("Frecuencia")
hist(df$price, main = "Histograma distribución precio", breaks=100)
ggplot(df, aes(price, review_scores_rating)) +
geom_smooth()
df_precio_barrio <- df %>% select(price, neighbourhood_group_cleansed) %>% group_by(neighbourhood_group_cleansed) %>% summarize(avg_price = mean(price, na.rm = TRUE))
ggplot(df_precio_barrio, aes(reorder(neighbourhood_group_cleansed, avg_price), avg_price)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90))
# ggplot(df, aes(neighbourhood_group_cleansed, review_scores_rating)) +
#   geom_bar() +
#   labs(x = "Barrio", y = "Calificación por localización") +
#   ggtitle("Boxplot de calificación por localización y barrio")
# datos_agrupados <- df %>%
# gather(key = "rating_type", value = "ratings", review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value) %>% select(ratings, rating_type) %>% cbind(room_type = df$room_type)
#
#
# ggplot(datos_agrupados, aes(x = room_type)) +
#   geom_boxplot(aes(y = ratings, fill = rating_type)) +
#   scale_fill_brewer(palette = "Set1") +
#   theme(axis.text.x = element_text(angle = 90)) +
#   ylim(3.5,5)
df_numerico <- df |>
mutate(host_since = as.numeric(format(host_since, "%Y"))) |>
mutate(across(where(is.numeric), scale)) |>
mutate(across(where(is.logical), as.numeric))
df_numerico <- dummy_cols(df_numerico,
select_columns = names(which(sapply(df_numerico, is.factor))),
remove_selected_columns = TRUE)
pca_result <- prcomp(df_numerico, center = TRUE, scale. = FALSE)
plot(pca_result, type = "l")
pca_result <- prcomp(df_numerico, center = TRUE, scale. = FALSE)
library(tidyverse)
library(tidymodels)
library(quarto)
library(fastDummies)
library(GGally)
set.seed(123)
training_test_split <- initial_split(df, prop = 0.75, strata = neighbourhood_group_cleansed)
# Crear los data frames de entrenamiento y el resto
training_data <- training(training_test_split)
test_valid_data <- testing(training_test_split)
# Ahora dividir el conjunto restante en prueba (15%) y validación (10%)
# Calculamos la proporción para la partición test/valid basándonos en el tamaño del conjunto restante
prop_test <- 0.15 / (0.15 + 0.10)
# Crear la segunda partición
set.seed(123) # Para reproducibilidad
test_validation_split <- initial_split(test_valid_data, prop = prop_test, strata = neighbourhood_group_cleansed)
# Crear los data frames de prueba y validación
test_data <- training(test_validation_split)
validation_data <- testing(test_validation_split)
# Ahora tienes tres conjuntos: entrenamiento, prueba y validación
set.seed(123)
training_test_split <- initial_split(df, prop = 0.75, strata = neighbourhood_group_cleansed)
# Crear los data frames de entrenamiento y el resto
training_data <- training(training_test_split)
test_valid_data <- testing(training_test_split)
# Ahora dividir el conjunto restante en prueba (15%) y validación (10%)
# Calculamos la proporción para la partición test/valid basándonos en el tamaño del conjunto restante
prop_test <- 0.15 / (0.15 + 0.10)
# Crear la segunda partición
set.seed(123) # Para reproducibilidad
test_validation_split <- initial_split(test_valid_data, prop = prop_test, strata = neighbourhood_group_cleansed)
# Crear los data frames de prueba y validación
test_data <- training(test_validation_split)
validation_data <- testing(test_validation_split)
# Ahora tienes tres conjuntos: entrenamiento, prueba y validación
